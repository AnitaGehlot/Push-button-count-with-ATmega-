
Switch_count.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000374  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000374  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  0000041a  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000008c  00000000  00000000  0000045a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ae  00000000  00000000  000004e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000282  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000561  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000168  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000373  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000019e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e7       	ldi	r30, 0x74	; 116
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b8 01 	jmp	0x370	; 0x370 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int i;
//volatile unsigned char j;

void main()
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
	DDRD&=~(1<<2);
  96:	8a 98       	cbi	0x11, 2	; 17
	PORTD|=(1<<2);
  98:	92 9a       	sbi	0x12, 2	; 18
	DDRD&=~(1<<3);
  9a:	8b 98       	cbi	0x11, 3	; 17
	PORTD|=(1<<3);
  9c:	93 9a       	sbi	0x12, 3	; 18
	//init_interrupt();
	InitLCD(0);
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <InitLCD>
	LCDClear();
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	0e 94 c9 00 	call	0x192	; 0x192 <LCDByte>
	LCDWriteString("Intruupt process");
  b0:	80 e6       	ldi	r24, 0x60	; 96
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 1c 01 	call	0x238	; 0x238 <LCDWriteString>
  b8:	88 e8       	ldi	r24, 0x88	; 136
  ba:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	29 e1       	ldi	r18, 0x19	; 25
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <main+0x2e>
	_delay_ms(500);
	LCDClear();
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	0e 94 c9 00 	call	0x192	; 0x192 <LCDByte>
  d6:	c0 e5       	ldi	r28, 0x50	; 80
  d8:	d3 ec       	ldi	r29, 0xC3	; 195
	//sei();
	while(1)
    {
	//int i=0;
	if((!(PIND&4))&&(PIND&8))
  da:	82 99       	sbic	0x10, 2	; 16
  dc:	08 c0       	rjmp	.+16     	; 0xee <main+0x5c>
  de:	83 9b       	sbis	0x10, 3	; 16
  e0:	06 c0       	rjmp	.+12     	; 0xee <main+0x5c>
    {
	i=i+1;
  e2:	80 91 72 00 	lds	r24, 0x0072
  e6:	90 91 73 00 	lds	r25, 0x0073
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	09 c0       	rjmp	.+18     	; 0x100 <main+0x6e>
	LCDWriteIntXY(0,1,i,3);
	_delay_ms(200);
    }
	else if((PIND&4)&&(!(PIND&8)))
  ee:	82 9b       	sbis	0x10, 2	; 16
  f0:	0c c0       	rjmp	.+24     	; 0x10a <main+0x78>
  f2:	83 99       	sbic	0x10, 3	; 16
  f4:	0a c0       	rjmp	.+20     	; 0x10a <main+0x78>
    {
	i=i-1;
  f6:	80 91 72 00 	lds	r24, 0x0072
  fa:	90 91 73 00 	lds	r25, 0x0073
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	90 93 73 00 	sts	0x0073, r25
 104:	80 93 72 00 	sts	0x0072, r24
 108:	0a c0       	rjmp	.+20     	; 0x11e <main+0x8c>
	LCDWriteIntXY(0,1,i,3);
	_delay_ms(200);
	}
 	else if(i<0)
 10a:	80 91 72 00 	lds	r24, 0x0072
 10e:	90 91 73 00 	lds	r25, 0x0073
 112:	97 ff       	sbrs	r25, 7
 114:	e2 cf       	rjmp	.-60     	; 0xda <main+0x48>
	{
	i=0;
 116:	10 92 73 00 	sts	0x0073, r1
 11a:	10 92 72 00 	sts	0x0072, r1
	LCDWriteIntXY(0,1,i,3);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	0e 94 88 01 	call	0x310	; 0x310 <LCDGotoXY>
 126:	80 91 72 00 	lds	r24, 0x0072
 12a:	90 91 73 00 	lds	r25, 0x0073
 12e:	63 e0       	ldi	r22, 0x03	; 3
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	0e 94 2a 01 	call	0x254	; 0x254 <LCDWriteInt>
 136:	ce 01       	movw	r24, r28
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0xa6>
 13c:	ce cf       	rjmp	.-100    	; 0xda <main+0x48>

0000013e <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 13e:	84 b3       	in	r24, 0x14	; 20
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 144:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 146:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	8a 95       	dec	r24
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	97 9a       	sbi	0x12, 7	; 18
 152:	82 2f       	mov	r24, r18
 154:	8a 95       	dec	r24
 156:	f1 f7       	brne	.-4      	; 0x154 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 158:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 15a:	82 95       	swap	r24
 15c:	80 7f       	andi	r24, 0xF0	; 240
 15e:	92 2f       	mov	r25, r18
 160:	9a 95       	dec	r25
 162:	f1 f7       	brne	.-4      	; 0x160 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 164:	97 98       	cbi	0x12, 7	; 18
 166:	92 2f       	mov	r25, r18
 168:	9a 95       	dec	r25
 16a:	f1 f7       	brne	.-4      	; 0x168 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 16c:	97 9a       	sbi	0x12, 7	; 18
 16e:	92 2f       	mov	r25, r18
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 174:	93 b3       	in	r25, 0x13	; 19
 176:	92 2f       	mov	r25, r18
 178:	9a 95       	dec	r25
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 17c:	97 98       	cbi	0x12, 7	; 18
 17e:	92 2f       	mov	r25, r18
 180:	9a 95       	dec	r25
 182:	f1 f7       	brne	.-4      	; 0x180 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 184:	87 fd       	sbrc	r24, 7
 186:	e4 cf       	rjmp	.-56     	; 0x150 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 188:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 18a:	84 b3       	in	r24, 0x14	; 20
 18c:	8f 60       	ori	r24, 0x0F	; 15
 18e:	84 bb       	out	0x14, r24	; 20

}
 190:	08 95       	ret

00000192 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 192:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 194:	66 23       	and	r22, r22
 196:	11 f4       	brne	.+4      	; 0x19c <LCDByte+0xa>
	CLEAR_RS();
 198:	96 98       	cbi	0x12, 6	; 18
 19a:	01 c0       	rjmp	.+2      	; 0x19e <LCDByte+0xc>
else
	SET_RS();
 19c:	96 9a       	sbi	0x12, 6	; 18
 19e:	21 e0       	ldi	r18, 0x01	; 1
 1a0:	82 2f       	mov	r24, r18
 1a2:	8a 95       	dec	r24
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 1a6:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 1a8:	85 b3       	in	r24, 0x15	; 21
 1aa:	93 2f       	mov	r25, r19
 1ac:	92 95       	swap	r25
 1ae:	9f 70       	andi	r25, 0x0F	; 15
 1b0:	80 7f       	andi	r24, 0xF0	; 240
 1b2:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 1b4:	95 bb       	out	0x15, r25	; 21
 1b6:	82 2f       	mov	r24, r18
 1b8:	8a 95       	dec	r24
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 1bc:	97 98       	cbi	0x12, 7	; 18
 1be:	82 2f       	mov	r24, r18
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 1c4:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1c6:	85 b3       	in	r24, 0x15	; 21
 1c8:	3f 70       	andi	r19, 0x0F	; 15
 1ca:	80 7f       	andi	r24, 0xF0	; 240
 1cc:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 1ce:	85 bb       	out	0x15, r24	; 21
 1d0:	82 2f       	mov	r24, r18
 1d2:	8a 95       	dec	r24
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1d6:	97 98       	cbi	0x12, 7	; 18
 1d8:	2a 95       	dec	r18
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1dc:	0e 94 9f 00 	call	0x13e	; 0x13e <LCDBusyLoop>
}
 1e0:	08 95       	ret

000001e2 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1e2:	1f 93       	push	r17
 1e4:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1e6:	8b e3       	ldi	r24, 0x3B	; 59
 1e8:	9b e2       	ldi	r25, 0x2B	; 43
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1ee:	84 b3       	in	r24, 0x14	; 20
 1f0:	8f 60       	ori	r24, 0x0F	; 15
 1f2:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 1f4:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1f6:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1f8:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 1fa:	85 b3       	in	r24, 0x15	; 21
 1fc:	80 7f       	andi	r24, 0xF0	; 240
 1fe:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 200:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 202:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 204:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	98 2f       	mov	r25, r24
 20a:	9a 95       	dec	r25
 20c:	f1 f7       	brne	.-4      	; 0x20a <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 20e:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 210:	a9 9a       	sbi	0x15, 1	; 21
 212:	98 2f       	mov	r25, r24
 214:	9a 95       	dec	r25
 216:	f1 f7       	brne	.-4      	; 0x214 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 218:	97 98       	cbi	0x12, 7	; 18
 21a:	8a 95       	dec	r24
 21c:	f1 f7       	brne	.-4      	; 0x21a <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 21e:	0e 94 9f 00 	call	0x13e	; 0x13e <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 222:	81 2f       	mov	r24, r17
 224:	8c 60       	ori	r24, 0x0C	; 12
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	0e 94 c9 00 	call	0x192	; 0x192 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 22c:	88 e2       	ldi	r24, 0x28	; 40
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	0e 94 c9 00 	call	0x192	; 0x192 <LCDByte>
}
 234:	1f 91       	pop	r17
 236:	08 95       	ret

00000238 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	04 c0       	rjmp	.+8      	; 0x248 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	0e 94 c9 00 	call	0x192	; 0x192 <LCDByte>
	msg++;
 246:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 248:	88 81       	ld	r24, Y
 24a:	88 23       	and	r24, r24
 24c:	c9 f7       	brne	.-14     	; 0x240 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 254:	ef 92       	push	r14
 256:	ff 92       	push	r15
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	df 93       	push	r29
 25e:	cf 93       	push	r28
 260:	00 d0       	rcall	.+0      	; 0x262 <LCDWriteInt+0xe>
 262:	00 d0       	rcall	.+0      	; 0x264 <LCDWriteInt+0x10>
 264:	0f 92       	push	r0
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	9c 01       	movw	r18, r24
 26c:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 26e:	fe 01       	movw	r30, r28
 270:	31 96       	adiw	r30, 0x01	; 1
 272:	85 e0       	ldi	r24, 0x05	; 5
 274:	df 01       	movw	r26, r30
 276:	1d 92       	st	X+, r1
 278:	8a 95       	dec	r24
 27a:	e9 f7       	brne	.-6      	; 0x276 <LCDWriteInt+0x22>
 27c:	fe 01       	movw	r30, r28
 27e:	35 96       	adiw	r30, 0x05	; 5
 280:	0d c0       	rjmp	.+26     	; 0x29c <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 282:	c9 01       	movw	r24, r18
 284:	6a e0       	ldi	r22, 0x0A	; 10
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	0e 94 91 01 	call	0x322	; 0x322 <__divmodhi4>
 28c:	80 83       	st	Z, r24
	val=val/10;
 28e:	c9 01       	movw	r24, r18
 290:	6a e0       	ldi	r22, 0x0A	; 10
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	0e 94 91 01 	call	0x322	; 0x322 <__divmodhi4>
 298:	9b 01       	movw	r18, r22
 29a:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 29c:	21 15       	cp	r18, r1
 29e:	31 05       	cpc	r19, r1
 2a0:	81 f7       	brne	.-32     	; 0x282 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 2a2:	bf ef       	ldi	r27, 0xFF	; 255
 2a4:	0f 3f       	cpi	r16, 0xFF	; 255
 2a6:	1b 07       	cpc	r17, r27
 2a8:	79 f4       	brne	.+30     	; 0x2c8 <LCDWriteInt+0x74>
 2aa:	20 e0       	ldi	r18, 0x00	; 0
 2ac:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 2ae:	ae 01       	movw	r20, r28
 2b0:	4f 5f       	subi	r20, 0xFF	; 255
 2b2:	5f 4f       	sbci	r21, 0xFF	; 255
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <LCDWriteInt+0x66>
 2b6:	2f 5f       	subi	r18, 0xFF	; 255
 2b8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ba:	fa 01       	movw	r30, r20
 2bc:	e2 0f       	add	r30, r18
 2be:	f3 1f       	adc	r31, r19
 2c0:	80 81       	ld	r24, Z
 2c2:	88 23       	and	r24, r24
 2c4:	c1 f3       	breq	.-16     	; 0x2b6 <LCDWriteInt+0x62>
 2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 2c8:	25 e0       	ldi	r18, 0x05	; 5
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	20 1b       	sub	r18, r16
 2ce:	31 0b       	sbc	r19, r17
 2d0:	7e 01       	movw	r14, r28
 2d2:	08 94       	sec
 2d4:	e1 1c       	adc	r14, r1
 2d6:	f1 1c       	adc	r15, r1
 2d8:	e2 0e       	add	r14, r18
 2da:	f3 1e       	adc	r15, r19
 2dc:	89 01       	movw	r16, r18
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2e0:	f7 01       	movw	r30, r14
 2e2:	81 91       	ld	r24, Z+
 2e4:	7f 01       	movw	r14, r30
 2e6:	80 5d       	subi	r24, 0xD0	; 208
 2e8:	61 e0       	ldi	r22, 0x01	; 1
 2ea:	0e 94 c9 00 	call	0x192	; 0x192 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2ee:	0f 5f       	subi	r16, 0xFF	; 255
 2f0:	1f 4f       	sbci	r17, 0xFF	; 255
 2f2:	05 30       	cpi	r16, 0x05	; 5
 2f4:	11 05       	cpc	r17, r1
 2f6:	a4 f3       	brlt	.-24     	; 0x2e0 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	cf 91       	pop	r28
 304:	df 91       	pop	r29
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	08 95       	ret

00000310 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 310:	88 32       	cpi	r24, 0x28	; 40
 312:	30 f4       	brcc	.+12     	; 0x320 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 314:	61 11       	cpse	r22, r1
 316:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 318:	80 68       	ori	r24, 0x80	; 128
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	0e 94 c9 00 	call	0x192	; 0x192 <LCDByte>
 320:	08 95       	ret

00000322 <__divmodhi4>:
 322:	97 fb       	bst	r25, 7
 324:	09 2e       	mov	r0, r25
 326:	07 26       	eor	r0, r23
 328:	0a d0       	rcall	.+20     	; 0x33e <__divmodhi4_neg1>
 32a:	77 fd       	sbrc	r23, 7
 32c:	04 d0       	rcall	.+8      	; 0x336 <__divmodhi4_neg2>
 32e:	0c d0       	rcall	.+24     	; 0x348 <__udivmodhi4>
 330:	06 d0       	rcall	.+12     	; 0x33e <__divmodhi4_neg1>
 332:	00 20       	and	r0, r0
 334:	1a f4       	brpl	.+6      	; 0x33c <__divmodhi4_exit>

00000336 <__divmodhi4_neg2>:
 336:	70 95       	com	r23
 338:	61 95       	neg	r22
 33a:	7f 4f       	sbci	r23, 0xFF	; 255

0000033c <__divmodhi4_exit>:
 33c:	08 95       	ret

0000033e <__divmodhi4_neg1>:
 33e:	f6 f7       	brtc	.-4      	; 0x33c <__divmodhi4_exit>
 340:	90 95       	com	r25
 342:	81 95       	neg	r24
 344:	9f 4f       	sbci	r25, 0xFF	; 255
 346:	08 95       	ret

00000348 <__udivmodhi4>:
 348:	aa 1b       	sub	r26, r26
 34a:	bb 1b       	sub	r27, r27
 34c:	51 e1       	ldi	r21, 0x11	; 17
 34e:	07 c0       	rjmp	.+14     	; 0x35e <__udivmodhi4_ep>

00000350 <__udivmodhi4_loop>:
 350:	aa 1f       	adc	r26, r26
 352:	bb 1f       	adc	r27, r27
 354:	a6 17       	cp	r26, r22
 356:	b7 07       	cpc	r27, r23
 358:	10 f0       	brcs	.+4      	; 0x35e <__udivmodhi4_ep>
 35a:	a6 1b       	sub	r26, r22
 35c:	b7 0b       	sbc	r27, r23

0000035e <__udivmodhi4_ep>:
 35e:	88 1f       	adc	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	5a 95       	dec	r21
 364:	a9 f7       	brne	.-22     	; 0x350 <__udivmodhi4_loop>
 366:	80 95       	com	r24
 368:	90 95       	com	r25
 36a:	bc 01       	movw	r22, r24
 36c:	cd 01       	movw	r24, r26
 36e:	08 95       	ret

00000370 <_exit>:
 370:	f8 94       	cli

00000372 <__stop_program>:
 372:	ff cf       	rjmp	.-2      	; 0x372 <__stop_program>
